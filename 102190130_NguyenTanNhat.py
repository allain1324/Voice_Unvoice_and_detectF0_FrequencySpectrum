# -*- coding: utf-8 -*-
"""Bai1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EQTIFdSN7W5FwBLoOR0Kc4b4YuzzyuBI
"""

# Commented out IPython magic to ensure Python compatibility.
from numpy.fft import fft, fftshift
from scipy.signal import find_peaks
from scipy.io.wavfile import read
from scipy.io.wavfile import write
import sys
import matplotlib.pyplot as plt
import numpy as np
import os
import IPython.display as ipd
import pandas as pd
from scipy.io import wavfile
import math
from scipy.fftpack import fft, ifft
from scipy.signal import medfilt
# %matplotlib inline
# %matplotlib inline

def MA(Fs,x):
  N = len(x) #So phan tu trong x
  d_khung = int(Fs * 0.03) # do dai 1 khung
  spt = math.floor(N/d_khung) #Sá»‘ pháº§n tá»­ trong 1 khung
  ma = []
  for i in range(1,spt+1):
    frame = x[(i-1)*d_khung+1 : d_khung*i]
    ma.append(sum(abs(frame)))
   #chuan hoa
  chuanhoa_ma = ma / max(ma)
  #print(len(chuanhoa_ma))
  return chuanhoa_ma;

def threshold(f, g):
    Nf = len(f)
    Ng = len(g)
    Tmin = min(g)
    Tmax = max(f)
    print(min(f),min(g),Tmin)
    print(max(f),max(g),Tmax)
    T = 0.5 * (Tmin + Tmax)
    i = len(np.where(f < T)[0])
    p = len(np.where(g > T)[0])
    j = -1
    q = -1
    tong1 = 0
    tong2 = 0
    while i == j or p == q:
      for a in np.arange(0,Nf,1):
        tong1 = max(f(a) - T,0) + tong1
      for b in np.arange(0,Ng,1):
        tong2 = max(T - g(b),0) + tong2
      A = (1.0 / Nf) * tong1 - (1.0 / Ng) * tong2
      if A < 0:
        Tmin = T
      else:
        Tmax = T
      T = 0.5 * (Tmin + Tmax)
      j = i
      q = p
      i = len(np.where(f < T)[0])
      p = len(np.where(g > T)[0])
    print("KL:" + str(T))
    return T

dic_huanluyen={
    '01MDA.wav':[0.00, 0.45, 0.81, 1.53, 1.85, 2.69, 2.86, 3.78, 4.15, 4.84, 5.14, 5.58],
    '02FVA.wav':[0, 0.83, 1.37, 2.09, 2.6, 3.57, 4, 4.76, 5.33, 6.18, 6.68, 7.18],
    '03MAB.wav':[0, 1.03, 1.42, 2.46, 2.8, 4.21, 4.52, 6.81, 7.14, 8.22, 8.5, 9.37],
    '06FTB.wav':[0, 1.52, 1.92,3.91,4.35,6.18,6.6,8.67,9.14,10.94,11.33,12.75]
}
thres_ = []
nguong = 0
for key,value in dic_huanluyen.items():
  link = '/content/' + str(key)
  fs, data = wavfile.read(link)
  ma = MA(fs,data)
  gtri = list(np.array(value) // 0.03)
  gtri = [int(gtri) for gtri in gtri]
  i = 1
  #print(ma)
  k_lang = []
  k_noi = []
  while i < len(gtri):
    t = ma[gtri[i-1]:gtri[i]+1]
    k_lang.extend(list(t))
    i = i+2
  i = 1
  while i < len(gtri)-1:
    t = ma[gtri[i]+1:gtri[i+1]]
    k_noi.extend(list(t))
    i = i+2
  #print(len(k_lang),k_lang)
  #print(len(k_noi),k_noi)
  kqua = threshold(k_lang,k_noi)
  thres_.append(kqua)
nguong = sum(thres_)/len(thres_)
print("Nguong: " + str(nguong))

def duyetMang(x):
  mangDuocDuyet = []
  mangDuocDuyet.append(x[0])
  mangDuocDuyet.append(x[1])
  mangDuocDuyet.append(x[2])
  for i in range(0, len(x) - 2):
    mangDuocDuyet = []
    mangDuocDuyet.append(x[i])
    mangDuocDuyet.append(x[i+1])
    mangDuocDuyet.append(x[i+2])
    if((x[i] / x[i + 1]) < 1.3 and (x[i + 1] / x[i + 2]) < 1.3 and (x[i] / x[i + 2]) < 1.3):
      return mangDuocDuyet
    else:
      continue
  return mangDuocDuyet

def mientanso(data, fs, key, mang, veHoacKhong):
  dic_Coor = {}
  max_s = []
  mang_cutted = []
  for i in range(1,len(mang)-1):
    mang_cutted.append(mang[i])
  mang_reshape = np.reshape(mang_cutted,(int(len(mang_cutted)/2), 2))
  # print("reshape: " + str(mang_reshape))
  frame_len = np.round(0.03 * fs)
  h = np.hamming(frame_len)
  k = 0

  # for f in range(5,11):
  for i in mang_reshape:
    for j in range(i[0],i[1]):
      k = k+1
      data = data / max(data)
      N = 4096
      dcnn = fs / N
      dulieu = data[int(j*frame_len):int((j+1)*frame_len)]
      frame = np.array(dulieu) * np.array(h)
      P2 = abs(fft(frame,N))
      P3 = 10 * np.log10(P2)
      P3 = P3[1:int(len(P3)/2)]  #lay 1 nua ben trai xap xi 22kHz
      peaks, value_peaks = find_peaks(P3[int(000/dcnn):int(1500/dcnn)],height = 5, prominence= 7, distance = 7)
      tt = np.linspace(0, fs/2, len(P3))
      f0 = []
      for i in range(0,len(list(peaks)) - 1):
        f0.append((peaks[i+1] - peaks[i]) * dcnn)
      f0 = [item for item in f0 if item > 80 and item < 450]    
      # print("f0 ban dau:" + str(f0))       
      f0 = sorted(f0,reverse = True)
      # print("f0 truoc xoa: " + str(f0))
      if(len(f0) >= 3):
        f0 = duyetMang(f0)
      # print("f0 sau xoa: " + str(f0))
      check = False
      for i in f0:
        for p in f0:
          if( 1.98 < p/i < 2.02):
            dic_Coor[j] = i
            index_f0 = f0.index(i)
            f0 = f0[index_f0:]
            # print("F0 trong for: " + str(i))
            max_s.append(i)
            check = True
            break
        if(check == True):
          break
      # print("f0 sau khi cat: " + str(f0))

      if(len(f0) == 2 and check ==  False):
        dic_Coor[j] = f0[1];
        # print("F0: " + str(f0[1]))
        max_s.append(f0[1])      
      elif(len(f0) >= 3 and check ==  False):
        tyle = []
        for o in range(0,len(f0)-1):
          tyle.append(f0[o] / f0[o + 1])
        inde = tyle.index(min(tyle))
        f1 = 0
        f2 = 0
        f1 = f0[inde]
        f2 = f0[inde + 1]
        f_mean = (f1 + f2) / 2
        dic_Coor[j] = f_mean
        # print("F0: " + str(f_mean))
        max_s.append(f_mean)

      # print(sorted(peaks))
      # print("------------")
      if (veHoacKhong == 1):
        plt.figure(figsize=(50,10), dpi=200)
        plt.plot(tt,P3,color = 'red')
        font1 = {'family':'serif','color':'blue','size':40}
        font2 = {'family':'serif','color':'blue','size':20}
        plt.title(key,fontdict = font1)
        plt.xlabel("Frequency (Hz)",fontsize=20)
        plt.xticks(np.arange(0, fs/2, step=300))
        plt.yticks(np.arange(-30, 50, step=2))
        plt.ylabel("Amplitude",fontsize=20)
        plt.axhline(y = 0, color ='black')
        # plt.axhline(y = 4, color ='red')
        # plt.axvline(x = 1500, color ='blue')
        for i in range(0,len(list(peaks))):
          plt.axvline(x = peaks[i] * dcnn, color ='green')
        plt.show()
  # print(dic_Coor)
  # print("f0 da sap xep: " + str(sorted(max_s)))
  # print("do dai: " + str(len(max_s)))
  # print("\n\n\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n\n\n")

  return dic_Coor

  # nameFile = key
  # keys = []
  # values = []
  # N = len(data)
  # t = N/fs
  # T = np.linspace(0.0,t,N)
  # chiso = 0
  # for key, value in dic_Coor.items():
  #   keys.append(key* 0.03)
  #   values.append(max_s[chiso])
  #   chiso = chiso+1
  # plt.figure(figsize=(50,10), dpi=200)
  # plt.xlabel("Time (s)",fontsize=20)
  # plt.ylabel("Amplitude",fontsize=20)
  # font1 = {'family':'serif','color':'blue','size':40}
  # font2 = {'family':'serif','color':'blue','size':20}
  # plt.title(nameFile,fontdict = font1)
  # plt.scatter(keys, values)
  # plt.xticks(np.arange(0, t, step=1))
  # plt.yticks(np.arange(0, 400, step=100))
  # plt.show()

def locTrungVi(data, N):
  dodai = len(data)
  data = list(data)
  median = []

  for i in range(dodai):
    left = i - N
    right = i + N
    if left < 0:
      temp = [0] * (0 - left) + data[0:right + 1]
    elif right >=dodai:
      temp = data[left:dodai] + [0] * (right - dodai + 1)
    else:
      temp = data[left: right + 1]
    temp = sorted(temp)
    median.append(temp[N])
  return list(np.array(median))

a = [1,2,3,4,5,6,7,8]
print(a[2:5+1])

KLmau = []
def KL_Mau(mau):
  for i in np.arange(0,len(mau)):
    KLmau.append(int(mau[i] // 0.03))

Q = []  
def defineVUS(n_khung, normalized_ma, name, nguong):
  for i in np.arange(n_khung):
    if abs(normalized_ma[i]) < nguong:
        Q.append(0)
    else:
        Q.append(1)
  Q.append(0)

KL = []  
def defineKL(n_khung):
  i = 0
  dem = 0
  while (i <= n_khung):
    dau = i
    cuoi = i
    while (Q[cuoi] == 0 and cuoi < n_khung ):
      cuoi = cuoi + 1
    if ( (cuoi-dau) * 0.03 > 0.3):
      KL.append(dau)
      KL.append(dau + (cuoi - dau))
      i = cuoi - 1
    i = i + 1
  #print("Khoang lang tinh toan: " + str(KL))
def paint(name,power,data,fs,n_khung):
    print("\n")
    print("Màu đỏ: Khoảng lặng tính toán")
    print("Màu xanh: Khoảng lặng kiểm thử")
    dic_Coor = mientanso(data, fs, name, KL, 0)
    signal_st = data / max(abs(data))
    N = len(data)
    t = N/fs
    T = np.linspace(0.0,t,N) #tạo 1 array cho tgian
    fLen = int(fs * 0.03)
    nF = math.floor(N/fLen)
    p = MA(fs,data)
    fig = plt.figure(figsize=(35, 10))
    font1 = {'family':'serif','color':'blue','size':40}
    font2 = {'family':'serif','color':'blue','size':20}
    t_frame = (np.linspace(fLen/2,N-fLen/2,nF))/fs; #chia khung cho frame để plot lên

    nameFile = name
    keys = []
    values = []
    N = len(data)
    t = N/fs
    T = np.linspace(0.0,t,N)
    mang_cutted = []
    for i in range(1,len(KL)-1):
      mang_cutted.append(KL[i])
    mang_reshape = np.reshape(mang_cutted,(int(len(mang_cutted)/2), 2))
    for key, value in dic_Coor.items():
      keys.append(key* 0.03)
      values.append(value)

    inde = []
    chiso = 0
    for i in range(0, len(keys) - 1):
      if(abs(keys[i] - keys[i + 1]) >= 0.3):
        inde.append(i)
    # print(inde)
    mang_shape = []
    mang_shape.append(0)
    # print("value truoc: " + str(len(values)))
    # print(str(keys))
    # print(len(keys))
    dem = 0
    for i in inde:
      mang_shape.append(int(i))
      mang_shape.append(int(i) + 1)
    mang_shape.append(len(keys) - 1)
    
    mang_reshape = np.reshape(mang_shape,(int(len(mang_shape)/2), 2))
    tmp = []
    daloc = []
    for i in mang_reshape:
      tmp = values[i[0]: i[1] + 1]
      daloc.extend(locTrungVi(tmp, 3))
    values = daloc
    print("do lech chuan: " + str(np.std(values)))
    print("Fmean-" + str(key) + ": " + str(sum(values)/len(values)))
    # print("value sau: " + str(len(values)))

    plt.figure(figsize=(45, 10))
    plt.title(name,fontdict = font1)
    plt.ylabel("Frequency", fontdict = font2)
    plt.plot(T,signal_st,'blue')
    plt.xlim([0.0,t]) #truc thoi gian
    plt.xticks(np.arange(0, t, step=0.5))
    plt.yticks([0, 100, 200, 300, 400])
    plt.scatter(keys, values, color="black") #Vẽ MA
    plt.tight_layout()
    for i in np.arange(0,len(KL)):
      plt.axvline(x = KL[i] * 0.03, color ='red')
    for i in np.arange(0,len(KL)):
      plt.axvline(x = KLmau[i] * 0.03, color ='green', linestyle = '--', lw = 5)
    plt.show()

    plt.figure(figsize=(45, 10))
    plt.ylabel("Amplitude", fontdict = font2)
    plt.xlabel("Time", fontdict = font2)
    plt.plot(T,signal_st,'blue')
    plt.xlim([0.0,t]) #truc thoi gian
    plt.xticks(np.arange(0, t, step=0.5))
    plt.yticks(np.arange(-1,1, step=0.5))
    #p = (p * max(signal_st))
    plt.plot(t_frame,p, color="black") #Vẽ MA
    plt.tight_layout()
    #print(KL)
    for i in np.arange(0,len(KL)):
      #print(i)
      #print(KL)
      #plt.axvline(KL[i] * 0.03, ymin = 0,ymax = 1, color='r', ls='dotted')
      plt.axvline(x = KL[i] * 0.03, color ='red')
    for i in np.arange(0,len(KL)):
      #print(i)
      #print(KLmau)
      plt.axvline(x = KLmau[i] * 0.03, color ='green', linestyle = '--', lw = 5)
    plt.show()


    # plt.figure(figsize=(50,10), dpi=200)
    # plt.xlabel("Time (s)",fontsize=20)
    # plt.ylabel("Amplitude",fontsize=20)
    # font1 = {'family':'serif','color':'blue','size':40}
    # font2 = {'family':'serif','color':'blue','size':20}
    # plt.scatter(keys, values)
    # plt.xticks(np.arange(0, t, step=1))
    # plt.yticks(np.arange(0, 400, step=100))
    # for i in np.arange(0,len(KL)):
    #   #print(i)
    #   #print(KL)
    #   #plt.axvline(KL[i] * 0.03, ymin = 0,ymax = 1, color='r', ls='dotted')
    #   plt.axvline(x = KL[i] * 0.03, color ='red')
    # for i in np.arange(0,len(KL)):
    #   #print(i)
    #   #print(KLmau)
    #   plt.axvline(x = KLmau[i] * 0.03, color ='green', linestyle = '--', lw = 5)
    # plt.show()

def VU(name,mau,nguong):
  Q = []
  KL = []
  link = '/content/' + str(name.split("&")[0])
  fs, data = wavfile.read(link)
  #thoi gian 1 khung
  t_khung = 0.03
  #do dai 1 khung
  d_khung = t_khung * fs
  #so luong khung
  n_khung = int(len(data) // d_khung)
  #tinh nang luong tin hieu
  power = MA(fs,data)
  #print(power)

  defineVUS(n_khung, power, name,nguong)

  KL_Mau(mau)
  defineKL(n_khung)  
  paint(name,power,data,fs,n_khung)


        #--------------------------------------main-------------------------------------------`  


dic_kiemthu = {
    '30FTN.wav&F_mean = 233.2, std = 11.6':[0, 0.59, 0.97, 1.76, 2.11, 3.44, 3.77, 4.7, 5.13, 5.96, 6.28, 6.78],
    '42FQT.wav&F_mean = 242.7, std = 8.5':[0, 0.46, 0.99, 1.56, 2.13, 2.51, 2.93, 3.79, 4.38, 4.77, 5.22, 5.79],
    '44MTT.wav&F_mean = 125.7, std = 8.5':[0, 0.93, 1.42, 2.59, 3, 4.71, 5.11, 6.26, 6.66, 8.04, 8.39, 9.27],
    '45MDV.wav&F_mean = 177.8, std = 5.7':[0, 0.88, 1.34, 2.35, 2.82, 3.76, 4.13, 5.04, 5.5, 6.41, 6.79, 7.42]
}
for key,value in dic_kiemthu.items():
  print(key)
  name = key
  TGianKL_Mau = value
  KL = []
  Q = []
  Q_mau = []
  KLmau = []
  VU(name,TGianKL_Mau,nguong)
  KL[len(KL) - 1] = KLmau[len(KLmau) - 1]
  print("Khoảng lặng tính toán: " + str(KL))
  print("Khoảng lặng kiểm thử: " + str(KLmau))
  chenhLech = list(np.array(KL) - np.array(KLmau))
  print("Chênh lệch: " + str(chenhLech))
  print("*" * 100)

dic_kiemthu = {
    '30FTN.wav&Tuan Hoan':[0, 27, 28, 0],
    '30FTN.wav&Khong Tuan Hoan':[0, 83, 84, 0],
    '42FQT.wav&Tuan Hoan':[0, 57, 58, 0],
    '42FQT.wav&Khong Tuan Hoan':[0, 77, 78, 0],
    '44MTT.wav&Tuan Hoan':[0, 160, 161, 0],
    '44MTT.wav&Khong Tuan Hoan':[0, 193, 194, 0],
    '45MDV.wav&Tuan Hoan':[0, 83, 84, 0],
    '45MDV.wav&Khong Tuan Hoan':[0, 100, 101, 0],

}

for key, value in dic_kiemthu.items():
  nameFile = key.split("&")[0]
  link = '/content/' + str(nameFile)
  fs, data = wavfile.read(link)
  mientanso(data, fs, key, value, 1)
  print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n")